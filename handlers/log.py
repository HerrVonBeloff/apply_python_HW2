from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Food
from .users import user_storage
from .workout import workout_storage
from .utils import get_food_info
import random

router_log = Router()

@router_log.message(Command("log_water"))
async def log_water(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        amount = int(message.text.split()[1])

        user_storage.update_user(user_id, 'logged_water', user_data['logged_water'] + amount)

        remaining = user_data['water_goal'] - user_data['logged_water']

        await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining} –º–ª")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")


food_info = {}
@router_log.message(Command("log_food"))
async def start_form(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        food = message.text.split()[1]
        calories_per_100 = await get_food_info(food)
        food_info['calories_per_100'] = calories_per_100
        await message.answer(f"–û—Ç–ª–∏—á–Ω—ã–π –≤–∫—É—Å! –í—ã —Å—ä–µ–ª–∏ {food}. –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å {calories_per_100} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
        await state.set_state(Food.grams)
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã>")

low_calories_food = ('cucumber', 
                     'red wine', 
                     'cabbage', 
                     'apple', 
                     'Greek yogurt', 
                     'carrot', 
                     'broccoly', 
                     'spinach'
                     )

@router_log.message(Food.grams)
async def process_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return
    try:
        grams = int(message.text)
        amount = food_info['calories_per_100']/100*grams
        user_storage.update_user(user_id, 'logged_calories', user_data['logged_calories'] + amount)
        remaining = user_data['calorie_goal'] - user_data['logged_calories']
        await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å {remaining} –∫–∫–∞–ª.")
        await state.clear()
        if remaining <= 0:
            recomended_food = random.sample(low_calories_food, k=3)
            await message.answer(f'**–û–π –æ–π –æ–π, –∫–∞–∂–µ—Ç—Å—è –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Å–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.** \n\n' 
                                 f'–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å:\n'
                                 f'{recomended_food[0]} - {await get_food_info(recomended_food[0])} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n'
                                 f'{recomended_food[1]} - {await get_food_info(recomended_food[1])} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n'
                                 f'{recomended_food[2]} - {await get_food_info(recomended_food[2])} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n')
        elif remaining < user_data['calorie_goal']*0.1:
            await message.answer(f'**–û–π, –∫–∞–∂–µ—Ç—Å—è –≤—ã —Å–∫–æ—Ä–æ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–≤–æ–µ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π.**' 
                                 f'–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å:\n'
                                 f'{recomended_food[0]} - {await get_food_info(recomended_food[0])} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n'
                                 f'{recomended_food[1]} - {await get_food_info(recomended_food[1])} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n'
                                 f'{recomended_food[2]} - {await get_food_info(recomended_food[2])} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n')

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å.")


@router_log.message(Command("log_workout"))
async def log_workout(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError

        workout_type = parts[1].lower()  # –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        duration = int(parts[2])        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        calories_per_min = workout_storage.get_workout(workout_type)
        if not calories_per_min:
            await message.answer(f"–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ '{workout_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        burned_calories = calories_per_min * duration

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
        additional_water = (duration // 30) * 200
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_storage.update_user(user_id, 'burned_calories', user_data['burned_calories'] + burned_calories)
        user_storage.update_user(user_id, 'logged_water', user_data['logged_water'] + additional_water)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {duration} –º–∏–Ω—É—Ç ‚Äî {burned_calories} –∫–∫–∞–ª.\n")
        if additional_water>0:
            await message.answer(
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {additional_water} –º–ª –≤–æ–¥—ã.")

    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>")

@router_log.message(Command("add_workout"))
async def add_workout(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        workout_type = message.text.split()[1]
        data = message.text.split()[2]
        workout_storage.set_workout(workout_type, data)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {workout_type}. –†–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π –≤ –º–∏–Ω—É—Ç—É: {data}")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add_workout <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <—Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π –≤ –º–∏–Ω—É—Ç—É>")

