from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from .users import user_storage
import matplotlib.pyplot as plt
import io
from aiogram.types import BufferedInputFile

router_st = Router()

@router_st.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    logged_water = user_data.get('logged_water', 0)
    water_goal = user_data.get('water_goal', 0)
    remaining_water = water_goal - logged_water

    logged_calories = user_data.get('logged_calories', 0)
    burned_calories = user_data.get('burned_calories', 0)
    calorie_goal = user_data.get('calorie_goal', 0)
    remaining_calories = calorie_goal - logged_calories + burned_calories

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    progress_message = (
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {remaining_calories} –∫–∫–∞–ª."
    )

    await message.answer(progress_message)


@router_st.message(Command("end_day"))
async def end_day(message: Message):
    user_id = message.from_user.id
    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
    total_water = user_data.get('logged_water', 0)
    total_calories = user_data.get('logged_calories', 0)
    total_burned = user_data.get('burned_calories', 0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å
    user_storage.save_daily_progress(user_id)

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    await message.answer(
        f"–ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å #{user_data['day_counter'] - 1}:\n"
        f"üåä –í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {total_water} –º–ª\n"
        f"üçΩÔ∏è –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories} –∫–∫–∞–ª\n"
        f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {total_burned} –∫–∫–∞–ª\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show_water_graph –∏–ª–∏ /show_calories_graph –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π."
    )

@router_st.message(Command("show_water_graph"))
async def show_water_graph(message: Message):
    user_id = message.from_user.id
    user_data = user_storage.get_user(user_id)
    if not user_data: 
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    weekly_progress = user_data.get('weekly_progress', [])
    if not weekly_progress:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    days = [day['day'] for day in weekly_progress]
    water = [day['logged_water'] for day in weekly_progress]

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é matplotlib
    plt.figure(figsize=(10, 5))
    plt.plot(days, water, marker='o', linestyle='-', linewidth=2, markersize=8)
    plt.fill_between(days, water, alpha=0.2)
    plt.xticks(days)
    plt.legend(['–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã (–º–ª)'])
    plt.title("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
    plt.xlabel("–î–µ–Ω—å")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–º–ª)")
    plt.grid(True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await message.answer_photo(BufferedInputFile(buf.read(), filename="water_graph.png"))

@router_st.message(Command("show_calories_graph"))
async def show_calories_graph(message: Message):
    user_id = message.from_user.id
    user_data = user_storage.get_user(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    weekly_progress = user_data.get('weekly_progress', [])
    if not weekly_progress:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    days = [day['day'] for day in weekly_progress]
    calories = [day['logged_calories'] for day in weekly_progress]

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é matplotlib
    plt.figure(figsize=(10, 5))
    plt.plot(days, calories, marker='o', color='darkorange', linestyle='-', linewidth=2, markersize=8)
    plt.fill_between(days, calories, color='darkorange', alpha=0.2)
    plt.xticks(days)
    plt.legend(['–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª)'])
    plt.title("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
    plt.xlabel("–î–µ–Ω—å")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª)")
    plt.grid(True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await message.answer_photo(BufferedInputFile(buf.read(), filename="calories_graph.png"))